from pymavlink import mavutil


class Drone:
    
    def __init__(self, br, sp, simulating):
        """
        Setting baud_rate, serial_port, and starting connection
        """

        self.baud_rate = br
        self.serial_port = sp
        self.simulating = simulating
        
        self.pix_con = None
        self.lon = 0
        self.lat = 0
        self.alt = 0

        if (self.baud_rate and self.serial_port != None):
            self.start_connection()


    def start_connection(self):
        """
        Start connection to Pixhawk Cube
        """
        
        if self.simulating:
            self.pix_con = mavutil.mavlink_connection(self.serial_port)
        else:
            self.pix_con = mavutil.mavlink_connection(self.serial_port, self.baud_rate)
            
        self.pix_con.wait_heartbeat()
        print("HB --> System %u, Component %u" % \
                (self.pix_con.target_system, self.pix_con.target_component))
        

    def set_mode(self, mode):
        """
        Send new mode to Pixhawk Cube
        """
        self.pix_con.mav.set_mode_send(self.pix_con.target_system, mode, mode)
        



    def arm(self):
        """
        Arm drone
        """
        self.pix_con.mav.command_long_send(self.pix_con.target_system, self.pix_con.target_component, \
                mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM, 0, 1, 0, 0, 0, 0, 0, 0)


    def takeoff(self, altitude):
        """
	Send takeoff command to drone
	"""
        self.pix_con.mav.command_long_send(self.pix_con.target_system, self.pix_con.target_component, \
                mavutil.mavlink.MAV_CMD_NAV_TAKEOFF, 0, 5, 0, 0, 0, 0, 0, altitude)    

    def land_at_start(self):
        """
        Land drone at point of takeoff
        """

        self.pix_con.mav.command_long_send(self.pix_con.target_system, self.pix_con.target_component, \
                mavutil.mavlink.MAV_CMD_NAV_RETURN_TO_LAUNCH, 0, 0, 0, 0, 0, 0, 0, 0)
        self.pix_con.mav.command_long_send(self.pix_con.target_system, self.pix_con.target_component, \
                mavutil.mavlink.MAV_CMD_DO_LAND_START, 0, 0, 0, 0, 0, 0, 0, 0)

        
        self.pix_con.mav.command_long_send(self.pix_con.target_system, self.pix_con.target_component, \
                mavutil.mavlink.MAV_CMD_NAV_LAND, 0, 0, 0, 0, 5, self.lat, self.lon, 0)	


    def set_waypoint(self):
        """
	Set waypoint at certain lla and push to flight controller 
	"""
        self.pix_con.mav.command_long_send(self.pix_con.target_system, self.pix_con.target_component, \
                mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0, 0, 0, self.lat, self.lon, self.alt)
        
    
    def get_balloon_gps(self):
        """
	Obtaining the GPS coordinates from the PIC32 via UART
	"""
        flag == 0;
        with serial.Serial('/dev/ttyS3', 9600, timeout=1) as UART3:
            while  (flag == 0):
                line = UART3.readline()   # read a '\n' terminated line
                if "GNGGA" in line:
                    flag = 1;
        values = line.split(",");
        self.lat = float(value[2])
        self.lon = float(value[4])
        self.alt = float(value[9])
    
    
    def circle(self, num_circles):
        """
        Flying num_circles at a desired latitude and longitude
        """
        self.pix_con.mav.command_long_send(self.pix_con.target_system, self.pix_con.target_component, \
                mavutil.mavlink.MAV_CMD_NAV_LOITER_TURNS, 0, num_circles, 0, 0, 0, self.lat, self.lon, self.alt)

    def change_param(self, parameter, value):
        self.pix_con.param_set_send(parameter, value, None)

if __name__ == "__main__":
    """
    # If on Pi
    baud = 921600
    serial_port = '/dev/serial0'
    """
    # If on Laptop
    serial_port = 'udpin:127.0.0.1:14551'
    baud = 69

    mattsdrone = Drone(baud, serial_port, True)
    mattsdrone.arm()
    
    mattsdrone.set_mode(13)
    mattsdrone.takeoff(40)
    mattsdrone.change_param("RTL_AUTOLAND", 1)
#    mattsdrone.set_mode(15)
#    mattsdrone.circle(10)
#    mattsdrone.set_mode(20)
    mattsdrone.set_mode(11)
    mattsdrone.land_at_start()
#    mattsdrone.set_waypoint()
    """
    get_balloon_gps(drone)
    set_waypoint(drone)
    land_at_start(drone)
    """
